{"version":3,"sources":["env.js","App.js","registerServiceWorker.js","index.js"],"names":["API_KEY","tokens","db","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","submitFormId","e","id","console","log","target","inputId","value","preventDefault","setState","playlists","fetch","then","res","json","i","items","length","currentUser","concat","toConsumableArray","state","title","snippet","itemCount","contentDetails","playlistClicked","submitFormName","inputName","res2","json2","setTimeout","handleClick","vids","filteredVids","arr","objectSpread","handlePlaylistClick","pages","url","name","j","push","videoId","playlistId","Math","ceil","pageInfo","totalResults","resultsPerPage","newUrl","nextPageRes","nextPageJson","filterVids","text","currentTarget","getFilteredVids","filter","vid","toLowerCase","includes","_this2","react_default","a","createElement","Fragment","mdbreact_esm","className","type","placeholder","ref","input","color","onClick","map","item","key","active","pill","icon","onInput","aria-label","el","index","class","href","hover","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.0848896f.chunk.js","sourcesContent":["export const API_KEY = \"AIzaSyDotJrfVw9QwJVu85Hs91Dh2DYDsvOiw6Q\";\r\nexport \r\nconst tokens = [\r\n    \"CDIQAA\",\r\n    \"CGQQAA\",\r\n    \"CJYBEAA\",\r\n    \"CMgBEAA\",\r\n    \"CPoBEAA\",\r\n    \"CKwCEAA\",\r\n    \"CN4CEAA\",\r\n    \"CJADEAA\",\r\n    \"CMIDEAA\",\r\n    \"CPQDEAA\",\r\n    \"CKYEEAA\",\r\n    \"CNgEEAA\",\r\n    \"CIoFEAA\",\r\n    \"CLwFEAA\",\r\n    \"CO4FEAA\",\r\n    \"CKAGEAA\",\r\n    \"CNIGEAA\",\r\n    \"CIQHEAA\",\r\n    \"CLYHEAA\",\r\n    \"COgHEAA\",\r\n    \"CJoIEAA\",\r\n    \"CMwIEAA\",\r\n    \"CP4IEAA\",\r\n    \"CLAJEAA\",\r\n    \"COIJEAA\",\r\n    \"CJQKEAA\",\r\n    \"CMYKEAA\",\r\n    \"CPgKEAA\",\r\n    \"CKoLEAA\",\r\n    \"CNwLEAA\",\r\n    \"CI4MEAA\",\r\n    \"CMAMEAA\",\r\n    \"CPIMEAA\",\r\n    \"CKQNEAA\",\r\n    \"CNYNEAA\",\r\n    \"CIgOEAA\",\r\n    \"CLoOEAA\",\r\n    \"COwOEAA\",\r\n    \"CJ4PEAA\",\r\n    \"CNAPEAA\",\r\n    \"CIIQEAA\",\r\n    \"CLQQEAA\",\r\n    \"COYQEAA\",\r\n    \"CJgREAA\",\r\n    \"CMoREAA\",\r\n    \"CPwREAA\",\r\n    \"CK4SEAA\",\r\n    \"COASEAA\",\r\n    \"CJITEAA\",\r\n    \"CMQTEAA\",\r\n    \"CPYTEAA\",\r\n    \"CKgUEAA\"];","import React, { Component } from \"react\";\r\nimport { MDBListGroup, MDBListGroupItem, MDBBtn, MDBContainer, MDBBadge, MDBInput, MDBCol, MDBRow,  MDBFormInline, MDBIcon } from \"mdbreact\";\r\nimport \"./index.css\";\r\nimport { tokens, API_KEY } from \"./env\";\r\nimport './App.css';\r\n\r\nlet db = [];\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      currentUser: '',\r\n      playlists: [],\r\n      vids: db,\r\n      filteredVids: []\r\n    }\r\n  } \r\n  /* \r\n  let url  = \"https://www.googleapis.com/youtube/v3/search?part=id&q=\" + this.input.value + \"&type=channel&key=AIzaSyDotJrfVw9QwJVu85Hs91Dh2DYDsvOiw6Q\";\r\n  let url2 = \"https://www.googleapis.com/youtube/v3/channels?key=AIzaSyDotJrfVw9QwJVu85Hs91Dh2DYDsvOiw6Q&forUsername=\" + this.input.value + \"&part=id\"; */\r\n    submitFormId = (e, id) => {\r\n      console.log(e.target);\r\n      console.log(\"https://www.googleapis.com/youtube/v3/playlists?key=\" + API_KEY + \"&channelId=\" + this.inputId.value + \"&part=snippet,contentDetails&maxResults=50\");\r\n      e.preventDefault();\r\n      this.setState({playlists: []});\r\n      fetch(\"https://www.googleapis.com/youtube/v3/playlists?key=\" + API_KEY + \"&channelId=\" + this.inputId.value + \"&part=snippet,contentDetails&maxResults=50\")\r\n      .then(res => res.json())\r\n      .then(json =>{\r\n        for(let i = 0; i < json.items.length; i++)\r\n          this.setState({ \r\n            currentUser: '',\r\n            playlists: [...this.state.playlists, \r\n                        {id: json.items[i].id,\r\n                        title: json.items[i].snippet.title,\r\n                        itemCount: json.items[i].contentDetails.itemCount,\r\n                        playlistClicked: false}]\r\n                      });\r\n      });\r\n      this.inputId.value = '';\r\n    }\r\n\r\n    submitFormName = (e) => {\r\n      e.preventDefault();\r\n      this.setState({playlists: []});\r\n      let id = '';\r\n      fetch(\"https://www.googleapis.com/youtube/v3/channels?key=\" + API_KEY + \"&forUsername=\" + this.inputName.value + \"&part=id\")\r\n      .then(res2 => res2.json())\r\n      .then(json2 =>{\r\n        id = json2.items[0].id;\r\n        console.log(json2);\r\n      });\r\n\r\n      setTimeout(()=>fetch(\"https://www.googleapis.com/youtube/v3/playlists?key=\" + API_KEY + \"&channelId=\" + id + \"&part=snippet,contentDetails&maxResults=50\")\r\n      .then(res => res.json())\r\n      .then(json =>{\r\n        for(let i = 0; i < json.items.length; i++)\r\n          this.setState({ \r\n            currentUser: '',\r\n            playlists: [...this.state.playlists, \r\n                        {id: json.items[i].id,\r\n                        title: json.items[i].snippet.title,\r\n                        itemCount: json.items[i].contentDetails.itemCount,\r\n                        playlistClicked: false}]\r\n                      });\r\n      }), 500);\r\n      this.inputName.value = '';\r\n    }\r\n\r\n    handleClick = (e) => {\r\n      this.setState({\r\n        vids: [],\r\n        filteredVids: []\r\n      });\r\n      const arr = [...this.state.playlists]; //store playlists state into array\r\n      for(let i = 0; i < this.state.playlists.length; i++) \r\n      {\r\n        if(this.state.playlists[i][\"id\"] === e.target[\"id\"]) //check if playlist from state is the one clicked\r\n        {\r\n          arr[i] = {...arr[i], playlistClicked: !arr[i].playlistClicked}; //toggle clicked playlist (show/hide)\r\n        } else {\r\n          arr[i] = {...arr[i], playlistClicked: false}; //set all non-clicked playlistsClicked value to false (hide)\r\n        }\r\n      }\r\n\r\n      this.setState({\r\n        playlists: arr\r\n      });\r\n  }\r\n\r\n  handlePlaylistClick = (e) => {\r\n    db = [];\r\n    let pages = 0;\r\n    let url = \"https://www.googleapis.com/youtube/v3/playlistItems?key=\" + API_KEY + \"&part=snippet,contentDetails&playlistId=\" + e.target.name + \"&maxResults=50\";\r\n    fetch(url)\r\n    .then(res => res.json())\r\n    .then(json => {\r\n      //1st page\r\n      for(let j = 0; j < json.items.length; j++)\r\n      {\r\n        if(json.items[j].snippet.title !== \"Private video\")\r\n                  db.push( \r\n                    {id: json.items[j].contentDetails.videoId,\r\n                    title: json.items[j].snippet.title,\r\n                    playlistId: json.items[j].snippet.playlistId}\r\n                  );\r\n      }\r\n                \r\n      pages = Math.ceil(json.pageInfo.totalResults/json.pageInfo.resultsPerPage);\r\n      console.log(pages);\r\n      let newUrl = '';\r\n      //1+ pages\r\n      if(pages > 1)\r\n      for(let i = 1; i < pages; i++)\r\n      {\r\n        newUrl = url + \"&pageToken=\" + tokens[i - 1];\r\n        console.log(newUrl);\r\n        fetch(newUrl)\r\n        .then(nextPageRes => nextPageRes.json())\r\n        .then(nextPageJson => {\r\n\r\n          for(let j = 0; j < nextPageJson.items.length; j++)\r\n              {\r\n                if(nextPageJson.items[j].snippet.title !== \"Private video\")\r\n                db.push( \r\n                  {id: nextPageJson.items[j].contentDetails.videoId,\r\n                  title: nextPageJson.items[j].snippet.title,\r\n                  playlistId: nextPageJson.items[j].snippet.playlistId}\r\n                );\r\n              }\r\n\r\n              setTimeout(()=>this.setState({\r\n                vids: db\r\n              }), 500);\r\n        });\r\n\r\n      } else {\r\n        this.setState({\r\n          vids: db\r\n        });\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  filterVids = (e) => {\r\n    const text = e.currentTarget.value;\r\n    const filteredVids = this.getFilteredVids(text);\r\n    this.setState({\r\n      filteredVids\r\n    });\r\n  }\r\n\r\n  getFilteredVids(text) {\r\n    return this.state.vids.filter( vid => \r\n      vid.title.toLowerCase().includes(text.toLowerCase()))\r\n  }\r\n\r\n  render() {\r\n    /* {console.log(this.state)} */\r\n\r\n    return (\r\n      <>\r\n      <MDBContainer className=\"container\">{/* <MDBRow> */}\r\n        {/* <MDBCol md=\"6\"> */}\r\n        <form className=\"d-flex justify-content-center form\">\r\n          <input className=\"form-control channel\" type=\"text\" placeholder=\"Channel's ID\" ref={input => this.inputId = input} />\r\n          <MDBBtn className=\"button\" color=\"primary\" type=\"submit\" onClick={this.submitFormId}>Go</MDBBtn>\r\n        </form>\r\n        <form className=\"d-flex justify-content-center form\">\r\n          <input className=\"form-control channel\" type=\"text\" placeholder=\"Channel's name\" ref={input => this.inputName = input} />\r\n          <MDBBtn className=\"button\" color=\"primary\" type=\"submit\" onClick={this.submitFormName}>Go</MDBBtn>\r\n        </form>\r\n        {/* </MDBCol> */}\r\n      {/* </MDBRow> */}\r\n            {/* \r\n            <Playlists url={this.state.currentUser} /> */}\r\n      </MDBContainer>\r\n      <MDBContainer className=\"container\">\r\n        <MDBListGroup>\r\n          {this.state.playlists.map((item, i) => item.playlistClicked ? \r\n          <div key={\"div\" + item.id}>\r\n            <MDBListGroupItem className=\"d-flex justify-content-between align-items-center\"  color=\"warning\" id={item.id} key={i} onClick={this.handleClick} active>{item.title}<MDBBadge color=\"primary\"\r\n        pill>{item.itemCount}</MDBBadge></MDBListGroupItem>\r\n            <MDBCol>\r\n              <MDBFormInline className=\"md-form d-flex justify-content-center align-items-center\">\r\n                <MDBIcon icon=\"search\" />\r\n                <input className=\"form-control form-control-sm ml-3 w-75\" type=\"search\" key={\"s\" + item.id} name={item.id} onClick={this.handlePlaylistClick} onInput={this.filterVids} placeholder={\"Search \" + item.title + \" playlist\"} aria-label=\"Search\" />\r\n              </MDBFormInline>\r\n            </MDBCol>\r\n{/*             <input type=\"search\" key={\"s\" + item.id} name={item.id} onClick={this.handlePlaylistClick} onInput={this.handlePlaylistChange} placeholder={\"Search \" + item.title + \" playlist\"} />\r\n */}            {this.state.vids.length ? this.state.filteredVids./* slice(0, 10). */map((el, index) => <div class=\"d-flex justify-content-center\"><MDBListGroupItem key={index} className=\"container\"><a href={\"https://www.youtube.com/watch?v=\" + el.id + \"&list=\" + item.id}>{el.title}</a></MDBListGroupItem></div>) : null}\r\n          </div>\r\n          : \r\n          <MDBListGroupItem className=\"d-flex justify-content-between align-items-center\"  color=\"warning\" id={item.id} key={item.id} onClick={this.handleClick} hover>{item.title}<MDBBadge color=\"primary\"\r\n          pill>{item.itemCount}</MDBBadge></MDBListGroupItem>)}\r\n        </MDBListGroup>\r\n        </MDBContainer>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log(\"New content is available; please refresh.\");\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render( <App /> , document.getElementById('root'));\n\nregisterServiceWorker();"],"sourceRoot":""}